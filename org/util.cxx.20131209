#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "util.h"

double calc_dist(double x1, double y1, double x2, double y2)
{
    double dx = x1-x2;
    double dy = y1-y2;
    return sqrt(dx*dx+dy*dy);
}
double calc_drad(double x, double y)
{
    if (x == 0.0) {
        if (y > 0)
            return PI/2.0;
        else if (y < 0)
            return -PI/2.0;
        else {
            fprintf(stderr,"calc_drad: x == y == 0, cannot calculate angle\n");
            exit(1);
        }
    } else if (y == 0.0) {
        if (x > 0) 
            return 0.0;
        else if (x < 0)
            return -PI;
    }
    
    double r = sqrt(x*x+y*y);
    if (y > 0) { 
        return acos(x/r);
    } else if (y < 0) {
        if (x > 0) {
            return 2.0*PI + asin(y/r);
        } else {
            return PI - asin(y/r);
        }
    }
    // cannot reach here
    return 0;
}
double calc_closest_point_by_two_lines(
    double px1, double py1, double pz1,  // point on line1
    double vx1, double vy1, double vz1,  // vector of line1
    double px2, double py2, double pz2,  //point on line2
    double vx2, double vy2, double vz2,  // vecotr of line2
    double* x1, double* y1, double *z1, // closest point on line1
    double* x2, double* y2, double *z2  // closest point on line2
    )
{
  double dist = 0.0;

  // normalize vectors
  double nvx1, nvy1, nvz1;
  double nvx2, nvy2, nvz2;
  norm_vector(vx1, vy1, vz1, &nvx1, &nvy1, &nvz1);
  norm_vector(vx2, vy2, vz2, &nvx2, &nvy2, &nvz2);
  double p21x = px2 - px1;
  double p21y = py2 - py1;
  double p21z = pz2 - pz1;
  double D1 = calc_dot(p21x, p21y, p21z, nvx1, nvy1, nvz1);
  double D2 = calc_dot(p21x, p21y, p21z, nvx2, nvy2, nvz2);
  double V  = calc_dot(nvx1, nvy1, nvz1, nvx2, nvy2, nvz2);
  //fprintf(stderr,"nvx1 %lf nvy1 %lf nvz1 %lf\n",nvx1,nvy1,nvz1);
  //fprintf(stderr,"nvx2 %lf nvy2 %lf nvz2 %lf\n",nvx2,nvy2,nvz2);
  //fprintf(stderr,"D1 %lf D2 %lf V %lf\n",D1,D2,V);
  if (V==1.0 || V==-1.0) {
    fprintf(stderr,"ERROR: calc_closest_point_by_two_lines: two lines are parallel\n");
    exit(1);
  }
  double t1 = (D1-V*D2)/(1.0-V*V);
  double t2 = (V*D1-D2)/(1.0-V*V);
  //fprintf(stderr,"t1 %lf t2 %lf\n",t1,t2);
  double ux = p21x + t2*nvx2 - t1*nvx1;
  double uy = p21y + t2*nvy2 - t1*nvy1;
  double uz = p21z + t2*nvz2 - t1*nvz1;
  dist = sqrt(ux*ux+uy*uy+uz*uz);
  
  *x1 = px1 + t1*nvx1;
  *y1 = py1 + t1*nvy1;
  *z1 = pz1 + t1*nvz1;
  *x2 = px2 + t2*nvx2;
  *y2 = py2 + t2*nvy2;
  *z2 = pz2 + t2*nvz2;

  return dist;
}
void norm_vector(double vx, double vy, double vz, double* nvx, double* nvy, double* nvz)
{
  double length = sqrt(vx*vx+vy*vy+vz*vz);
  *nvx = vx/length;
  *nvy = vy/length;
  *nvz = vz/length;
}
double calc_dot(double x1, double y1, double z1, double x2, double y2, double z2)
{
  return x1*x2 + y1*y2 + z1*z2;
}
